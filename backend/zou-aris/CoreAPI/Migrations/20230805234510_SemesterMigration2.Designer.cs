// <auto-generated />
using System;
using CoreAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoreAPI.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20230805234510_SemesterMigration2")]
    partial class SemesterMigration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoreAPI.Models.Academicregulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendencetypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int?>("GeneralregulationId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaximumYears")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("integer");

                    b.Property<int>("ProgrammeTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttendencetypeId");

                    b.HasIndex("ProgrammeId");

                    b.HasIndex("ProgrammeTypeId");

                    b.ToTable("academicregulations");
                });

            modelBuilder.Entity("CoreAPI.Models.Academicregulationparameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicRegulationId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseTake")
                        .HasColumnType("integer");

                    b.Property<string>("CourseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseWeight")
                        .HasColumnType("integer");

                    b.Property<int>("CourseworkContribution")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExamContribution")
                        .HasColumnType("integer");

                    b.Property<int>("level")
                        .HasColumnType("integer");

                    b.Property<int>("semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AcademicRegulationId");

                    b.HasIndex("CourseId");

                    b.ToTable("academicregulationparameters");
                });

            modelBuilder.Entity("CoreAPI.Models.AdmissionDocument", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("ApplicantTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("ProgrammetypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ApplicantTypeId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProgrammetypeId");

                    b.ToTable("admissiondocuments");
                });

            modelBuilder.Entity("CoreAPI.Models.AdmissionFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmissionFeeTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("ApplicanttypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProgrammeTypeId")
                        .HasColumnType("integer");

                    b.Property<double>("amount")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionFeeTemplateId");

                    b.HasIndex("ApplicanttypeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProgrammeTypeId");

                    b.ToTable("admissionfees");
                });

            modelBuilder.Entity("CoreAPI.Models.AdmissionFeeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("admissionfeetemplates");
                });

            modelBuilder.Entity("CoreAPI.Models.AdmissionSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndDate")
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("StartDate")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("admissionsessions");
                });

            modelBuilder.Entity("CoreAPI.Models.Admissionattendencetype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmissionprogrammeId")
                        .HasColumnType("integer");

                    b.Property<int>("AttendencetypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionprogrammeId");

                    b.HasIndex("AttendencetypeId");

                    b.ToTable("admissionattendencetypes");
                });

            modelBuilder.Entity("CoreAPI.Models.Admissionprogramme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmissionTemplateId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionTemplateId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("admissionprogrammes");
                });

            modelBuilder.Entity("CoreAPI.Models.Admissionsessiontemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmissionSessionId")
                        .HasColumnType("integer");

                    b.Property<int>("AdmissionTemplateId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionSessionId");

                    b.ToTable("admissionsessiontemplates");
                });

            modelBuilder.Entity("CoreAPI.Models.Admissiontemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ProgrammetypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammetypeId");

                    b.ToTable("admissiontemplates");
                });

            modelBuilder.Entity("CoreAPI.Models.Alternative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicregulationparameterId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AcademicregulationparameterId");

                    b.HasIndex("CourseId");

                    b.ToTable("alternatives");
                });

            modelBuilder.Entity("CoreAPI.Models.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DOB")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasComputedColumnSql("\"Name\" || ' ' || \"Surname\"", true);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Maidenname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phonenumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("identification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("applicants");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicantDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("PENDING");

                    b.Property<string>("VerifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("admissiondocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("applicantId")
                        .HasColumnType("integer");

                    b.Property<string>("filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("admissiondocumentId");

                    b.HasIndex("applicantId");

                    b.ToTable("applicantdocuments");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicantOtherqualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("applicantId")
                        .HasColumnType("integer");

                    b.Property<string>("grade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("institution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("qualification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("year")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("applicantId");

                    b.ToTable("applicantotherqualifications");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicantStudentnumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdmissionSessionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("N");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("applicantId")
                        .HasColumnType("integer");

                    b.Property<int?>("applicationId")
                        .HasColumnType("integer");

                    b.Property<string>("nationalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("studentnumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionSessionId");

                    b.HasIndex("UserId");

                    b.HasIndex("applicantId")
                        .IsUnique();

                    b.HasIndex("applicationId");

                    b.ToTable("applicantstudentnumbers");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicantSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("applicantId")
                        .HasColumnType("integer");

                    b.Property<string>("grade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("applicantId");

                    b.ToTable("applicantsubjects");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicantWorkexperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Jobtitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("applicantId")
                        .HasColumnType("integer");

                    b.Property<string>("duration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("applicantId");

                    b.ToTable("applicantworkexperiences");
                });

            modelBuilder.Entity("CoreAPI.Models.Applicanttype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("applicanttypes");
                });

            modelBuilder.Entity("CoreAPI.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmissionSessionId")
                        .HasColumnType("integer");

                    b.Property<string>("AppNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ApplicanttypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<string>("ApprovalStatus")
                        .HasColumnType("text");

                    b.Property<int>("CampusId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentVerification")
                        .HasColumnType("text");

                    b.Property<int>("EntryModeId")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text");

                    b.Property<int>("ProgrammeTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Pushed")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("applicantId")
                        .HasColumnType("integer");

                    b.Property<int>("attendencetypeId")
                        .HasColumnType("integer");

                    b.Property<string>("uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionSessionId");

                    b.HasIndex("ApplicanttypeId");

                    b.HasIndex("CampusId");

                    b.HasIndex("EntryModeId");

                    b.HasIndex("ProgrammeTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("applicantId");

                    b.HasIndex("attendencetypeId");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicationEntryModeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntryModeRequirementId")
                        .HasColumnType("integer");

                    b.Property<string>("filename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("EntryModeRequirementId");

                    b.ToTable("applicationentrymodedocuments");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicationPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("administratorId")
                        .HasColumnType("text");

                    b.Property<int>("admissionsessionId")
                        .HasColumnType("integer");

                    b.Property<int>("amount")
                        .HasColumnType("integer");

                    b.Property<int>("applicantId")
                        .HasColumnType("integer");

                    b.Property<int>("applicationId")
                        .HasColumnType("integer");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("paymentmethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("pollUrl")
                        .HasColumnType("text");

                    b.Property<string>("referencenumber")
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("admissionsessionId");

                    b.HasIndex("applicantId");

                    b.HasIndex("applicationId");

                    b.ToTable("applicationpayments");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicationProgramme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendenceTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("applicationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttendenceTypeId");

                    b.HasIndex("ProgrammeId");

                    b.HasIndex("applicationId");

                    b.ToTable("applicationprogrammes");
                });

            modelBuilder.Entity("CoreAPI.Models.AttendenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("attendencetypes");
                });

            modelBuilder.Entity("CoreAPI.Models.AuditEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("auditEntries");
                });

            modelBuilder.Entity("CoreAPI.Models.Campus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CampusTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampusTypeId");

                    b.HasIndex("DistrictId");

                    b.ToTable("campuses");
                });

            modelBuilder.Entity("CoreAPI.Models.CampusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("campusTypes");
                });

            modelBuilder.Entity("CoreAPI.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("CoreAPI.Models.CourseOnOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendenceTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseOnOfferTemplateId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("integer");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseOnOfferTemplateId");

                    b.ToTable("courseOnOffers");
                });

            modelBuilder.Entity("CoreAPI.Models.CourseOnOfferTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int>("Inititateby")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("PENDING");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("courseOnOfferTemplates");
                });

            modelBuilder.Entity("CoreAPI.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("currency");
                });

            modelBuilder.Entity("CoreAPI.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("CoreAPI.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("CoreAPI.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("CoreAPI.Models.EmailQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyHtml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("emailqueues");
                });

            modelBuilder.Entity("CoreAPI.Models.EntryMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("entrymodes");
                });

            modelBuilder.Entity("CoreAPI.Models.EntryModeRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntryModeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntryModeId");

                    b.ToTable("entrymoderequirements");
                });

            modelBuilder.Entity("CoreAPI.Models.ExaminationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Enddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InitiatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Startdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("PENDING");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("examinationPeriods");
                });

            modelBuilder.Entity("CoreAPI.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("faculties");
                });

            modelBuilder.Entity("CoreAPI.Models.Generalregulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GlobalsettingtemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProgrammetypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GlobalsettingtemplateId");

                    b.HasIndex("ProgrammetypeId");

                    b.ToTable("generalregulations");
                });

            modelBuilder.Entity("CoreAPI.Models.Generalregulationacademicrule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GeneralregulationId")
                        .HasColumnType("integer");

                    b.Property<int>("corepercentage")
                        .HasColumnType("integer");

                    b.Property<int?>("electivepercentage")
                        .HasColumnType("integer");

                    b.Property<int>("level")
                        .HasColumnType("integer");

                    b.Property<int?>("requiredlevel")
                        .HasColumnType("integer");

                    b.Property<int?>("requiredsemester")
                        .HasColumnType("integer");

                    b.Property<int>("semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GeneralregulationId");

                    b.ToTable("generalregulationacademicrules");
                });

            modelBuilder.Entity("CoreAPI.Models.Generalregulationregistrationrule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GeneralregulationId")
                        .HasColumnType("integer");

                    b.Property<int>("maximumcourses")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GeneralregulationId");

                    b.ToTable("generalregulationregistrationrules");
                });

            modelBuilder.Entity("CoreAPI.Models.Globalsettingtemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<string>("decisiontype")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int?>("semesters")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("globalsettingtemplate");
                });

            modelBuilder.Entity("CoreAPI.Models.Prerequisite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicregulationparameterId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AcademicregulationparameterId");

                    b.HasIndex("CourseId");

                    b.ToTable("prerequisites");
                });

            modelBuilder.Entity("CoreAPI.Models.Programme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ProgrammeTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProgrammeTypeId");

                    b.ToTable("programmes");
                });

            modelBuilder.Entity("CoreAPI.Models.ProgrammeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("programmehistory");
                });

            modelBuilder.Entity("CoreAPI.Models.ProgrammeSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("programmespecializations");
                });

            modelBuilder.Entity("CoreAPI.Models.ProgrammeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("programmetypes");
                });

            modelBuilder.Entity("CoreAPI.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("provinces");
                });

            modelBuilder.Entity("CoreAPI.Models.RegistrationFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Cost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FacultyId")
                        .HasColumnType("integer");

                    b.Property<int>("ProgrammeTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("RegistrationFeeTemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantTypeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ProgrammeTypeId");

                    b.HasIndex("RegistrationFeeTemplateId");

                    b.ToTable("registrationFees");
                });

            modelBuilder.Entity("CoreAPI.Models.RegistrationFeeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<string>("ChangeRequestId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InitiatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("PENDING");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("registrationFeeTemplates");
                });

            modelBuilder.Entity("CoreAPI.Models.RegistrationPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InitiatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("PENDING");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("registrationPeriods");
                });

            modelBuilder.Entity("CoreAPI.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("View")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            ConcurrencyStamp = "6/8/2023 01:45:09",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            View = "ADMIN"
                        });
                });

            modelBuilder.Entity("CoreAPI.Models.RoleSystemmodule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SystemModuleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SystemModuleId");

                    b.ToTable("rolesystemmodules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            SystemModuleId = 1
                        });
                });

            modelBuilder.Entity("CoreAPI.Models.RoleSystempermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleSystemsubmoduleId")
                        .HasColumnType("integer");

                    b.Property<int>("SystempermissionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleSystemsubmoduleId");

                    b.HasIndex("SystempermissionId");

                    b.ToTable("rolesystempermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            RoleSystemsubmoduleId = 1,
                            SystempermissionId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            RoleSystemsubmoduleId = 1,
                            SystempermissionId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            RoleSystemsubmoduleId = 1,
                            SystempermissionId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            RoleSystemsubmoduleId = 2,
                            SystempermissionId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            RoleSystemsubmoduleId = 2,
                            SystempermissionId = 5
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            RoleSystemsubmoduleId = 2,
                            SystempermissionId = 6
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            RoleSystemsubmoduleId = 3,
                            SystempermissionId = 7
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            RoleSystemsubmoduleId = 3,
                            SystempermissionId = 8
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            RoleSystemsubmoduleId = 3,
                            SystempermissionId = 9
                        });
                });

            modelBuilder.Entity("CoreAPI.Models.RoleSystemsubmodule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleSystemmoduleId")
                        .HasColumnType("integer");

                    b.Property<int>("SystemSubmoduleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleSystemmoduleId");

                    b.HasIndex("SystemSubmoduleId");

                    b.ToTable("rolesystemsubmodules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            RoleSystemmoduleId = 1,
                            SystemSubmoduleId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            RoleSystemmoduleId = 1,
                            SystemSubmoduleId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082",
                            RoleSystemmoduleId = 1,
                            SystemSubmoduleId = 3
                        });
                });

            modelBuilder.Entity("CoreAPI.Models.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InitiatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("PENDING");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("semesters");
                });

            modelBuilder.Entity("CoreAPI.Models.SemesterCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseOnOfferTemplateId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SemesteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseOnOfferTemplateId");

                    b.ToTable("semesterCourses");
                });

            modelBuilder.Entity("CoreAPI.Models.SemesterRegistrationFeeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RegistrationFeeTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationFeeTemplateId");

                    b.HasIndex("SemesterId");

                    b.ToTable("semesterRegistrationFeeTemplates");
                });

            modelBuilder.Entity("CoreAPI.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CampusId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Dob")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("text")
                        .HasComputedColumnSql("\"Name\" || ' ' || \"Surname\"", true);

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Identificationnumber")
                        .HasColumnType("text");

                    b.Property<string>("Identificationtype")
                        .HasColumnType("text");

                    b.Property<string>("Intake")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Profile")
                        .HasColumnType("text");

                    b.Property<string>("Pushed")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("students");
                });

            modelBuilder.Entity("CoreAPI.Models.StudentContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("studentContacts");
                });

            modelBuilder.Entity("CoreAPI.Models.StudentKin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phonenumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("studentKins");
                });

            modelBuilder.Entity("CoreAPI.Models.StudentProgramme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicRegulationId")
                        .HasColumnType("integer");

                    b.Property<int>("AttendenceTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProgrammeId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("PENDING");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AcademicRegulationId");

                    b.HasIndex("AttendenceTypeId");

                    b.HasIndex("ProgrammeId");

                    b.HasIndex("StudentId");

                    b.ToTable("studentProgrammes");
                });

            modelBuilder.Entity("CoreAPI.Models.Subject", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("CoreAPI.Models.Systemmodule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("systemmodules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Icon = "mdi-cogs",
                            Name = "System Configuration"
                        });
                });

            modelBuilder.Entity("CoreAPI.Models.Systempermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SystemSubmoduleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SystemSubmoduleId");

                    b.ToTable("systempermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "SM.CREATE",
                            SystemSubmoduleId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "SM.UPDATE",
                            SystemSubmoduleId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "SM.DELETE",
                            SystemSubmoduleId = 1
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "SSM.CREATE",
                            SystemSubmoduleId = 2
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "SSM.UPDATE",
                            SystemSubmoduleId = 2
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "SSM.DELETE",
                            SystemSubmoduleId = 2
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "RSM.ASSIGN",
                            SystemSubmoduleId = 2
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "USERS.VIEW",
                            SystemSubmoduleId = 3
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "USERS.CREATE",
                            SystemSubmoduleId = 3
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "USER.VIEW",
                            SystemSubmoduleId = 3
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "PASSWORD.RESET",
                            SystemSubmoduleId = 3
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "USER.UPDATE",
                            SystemSubmoduleId = 3
                        });
                });

            modelBuilder.Entity("CoreAPI.Models.Systemsubmodule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SystemModuleId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SystemModuleId");

                    b.ToTable("systemsubmodules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Icon = "mdi-cogs",
                            Name = "System Modules",
                            SystemModuleId = 1,
                            Url = "/systemmodules"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Icon = "mdi-cogs",
                            Name = "System Roles",
                            SystemModuleId = 1,
                            Url = "/roles"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Icon = "mdi-cogs",
                            Name = "System Users",
                            SystemModuleId = 1,
                            Url = "/users"
                        });
                });

            modelBuilder.Entity("CoreAPI.Models.TokenInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tokeninfo");
                });

            modelBuilder.Entity("CoreAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("PasswordExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("ACTIVE");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fe0773fe-8685-420c-837f-c6222de3ba2e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a44b7d0-6989-416e-a25f-15992c3aacdd",
                            Email = "admin@anixsys.co.zw",
                            EmailConfirmed = true,
                            Gender = "F",
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@ANIXSYS.CO.ZW",
                            NormalizedUserName = "ADMIN@ANIXSYS.CO.ZW",
                            PasswordHash = "AQAAAAIAAYagAAAAEOUhrYbzOUs/wOOf2kud2GCQ3so4V2lo/a1kQNTLHhD1rmdFFY91loYW5sTDEn6Q2Q==",
                            PhoneNumber = "000000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4910402d-16fb-4f80-8be5-1c3539675e2e",
                            Status = "ACTIVE",
                            Surname = "Admin",
                            Title = "Mr",
                            TwoFactorEnabled = false,
                            UserName = "admin@anixsys.co.zw"
                        });
                });

            modelBuilder.Entity("CoreAPI.Models.UserCampus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("UserId");

                    b.ToTable("usercampuses");
                });

            modelBuilder.Entity("CoreAPI.Models.UserDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("userdepartments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "fe0773fe-8685-420c-837f-c6222de3ba2e",
                            RoleId = "49aa7b86-508c-4666-8bd8-0631e84e2082"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CoreAPI.Models.Academicregulation", b =>
                {
                    b.HasOne("CoreAPI.Models.AttendenceType", "Attendencetype")
                        .WithMany()
                        .HasForeignKey("AttendencetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Programme", "Programme")
                        .WithMany("Academicregulations")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.ProgrammeType", "ProgrammeType")
                        .WithMany()
                        .HasForeignKey("ProgrammeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendencetype");

                    b.Navigation("Programme");

                    b.Navigation("ProgrammeType");
                });

            modelBuilder.Entity("CoreAPI.Models.Academicregulationparameter", b =>
                {
                    b.HasOne("CoreAPI.Models.Academicregulation", "Regulation")
                        .WithMany("Parameters")
                        .HasForeignKey("AcademicRegulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Course", "Course")
                        .WithMany("Academicregulationparameters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Regulation");
                });

            modelBuilder.Entity("CoreAPI.Models.AdmissionDocument", b =>
                {
                    b.HasOne("CoreAPI.Models.Applicanttype", "applicanttype")
                        .WithMany()
                        .HasForeignKey("ApplicantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Document", "document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.ProgrammeType", "programmeType")
                        .WithMany()
                        .HasForeignKey("ProgrammetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("applicanttype");

                    b.Navigation("document");

                    b.Navigation("programmeType");
                });

            modelBuilder.Entity("CoreAPI.Models.AdmissionFee", b =>
                {
                    b.HasOne("CoreAPI.Models.AdmissionFeeTemplate", "admissionFeeTemplate")
                        .WithMany("admissionFees")
                        .HasForeignKey("AdmissionFeeTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Applicanttype", "Applicanttype")
                        .WithMany("admissionfees")
                        .HasForeignKey("ApplicanttypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Currency", "Currency")
                        .WithMany("AdmissionFees")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.ProgrammeType", "programmeType")
                        .WithMany()
                        .HasForeignKey("ProgrammeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicanttype");

                    b.Navigation("Currency");

                    b.Navigation("admissionFeeTemplate");

                    b.Navigation("programmeType");
                });

            modelBuilder.Entity("CoreAPI.Models.Admissionattendencetype", b =>
                {
                    b.HasOne("CoreAPI.Models.Admissionprogramme", null)
                        .WithMany("attendencetypes")
                        .HasForeignKey("AdmissionprogrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.AttendenceType", "attendencetype")
                        .WithMany()
                        .HasForeignKey("AttendencetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("attendencetype");
                });

            modelBuilder.Entity("CoreAPI.Models.Admissionprogramme", b =>
                {
                    b.HasOne("CoreAPI.Models.Admissiontemplate", null)
                        .WithMany("programmes")
                        .HasForeignKey("AdmissionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Programme", "Programme")
                        .WithMany("Admissionprogrammes")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Programme");
                });

            modelBuilder.Entity("CoreAPI.Models.Admissionsessiontemplate", b =>
                {
                    b.HasOne("CoreAPI.Models.AdmissionSession", null)
                        .WithMany("Admissionsessiontemplate")
                        .HasForeignKey("AdmissionSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreAPI.Models.Admissiontemplate", b =>
                {
                    b.HasOne("CoreAPI.Models.ProgrammeType", "programmeType")
                        .WithMany()
                        .HasForeignKey("ProgrammetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("programmeType");
                });

            modelBuilder.Entity("CoreAPI.Models.Alternative", b =>
                {
                    b.HasOne("CoreAPI.Models.Academicregulationparameter", null)
                        .WithMany("Alternatives")
                        .HasForeignKey("AcademicregulationparameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicantDocument", b =>
                {
                    b.HasOne("CoreAPI.Models.AdmissionDocument", "admissionDocument")
                        .WithMany("applicantdocuments")
                        .HasForeignKey("admissiondocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Applicant", "applicant")
                        .WithMany("documents")
                        .HasForeignKey("applicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("admissionDocument");

                    b.Navigation("applicant");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicantOtherqualification", b =>
                {
                    b.HasOne("CoreAPI.Models.Applicant", "applicant")
                        .WithMany("otherqualifications")
                        .HasForeignKey("applicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("applicant");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicantStudentnumber", b =>
                {
                    b.HasOne("CoreAPI.Models.AdmissionSession", "admissionSession")
                        .WithMany()
                        .HasForeignKey("AdmissionSessionId");

                    b.HasOne("CoreAPI.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("CoreAPI.Models.Applicant", "applicant")
                        .WithOne("studentnumber")
                        .HasForeignKey("CoreAPI.Models.ApplicantStudentnumber", "applicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Application", "application")
                        .WithMany()
                        .HasForeignKey("applicationId");

                    b.Navigation("admissionSession");

                    b.Navigation("applicant");

                    b.Navigation("application");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicantSubject", b =>
                {
                    b.HasOne("CoreAPI.Models.Subject", "subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Applicant", "applicant")
                        .WithMany("subjects")
                        .HasForeignKey("applicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("applicant");

                    b.Navigation("subject");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicantWorkexperience", b =>
                {
                    b.HasOne("CoreAPI.Models.Applicant", "applicant")
                        .WithMany("workexperiences")
                        .HasForeignKey("applicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("applicant");
                });

            modelBuilder.Entity("CoreAPI.Models.Application", b =>
                {
                    b.HasOne("CoreAPI.Models.AdmissionSession", "admissionSession")
                        .WithMany("applications")
                        .HasForeignKey("AdmissionSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Applicanttype", "applicanttype")
                        .WithMany()
                        .HasForeignKey("ApplicanttypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Campus", "Campus")
                        .WithMany("applications")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.EntryMode", "entrymode")
                        .WithMany()
                        .HasForeignKey("EntryModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.ProgrammeType", "programmeType")
                        .WithMany()
                        .HasForeignKey("ProgrammeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("CoreAPI.Models.Applicant", "applicant")
                        .WithMany("applications")
                        .HasForeignKey("applicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.AttendenceType", "attendenceType")
                        .WithMany()
                        .HasForeignKey("attendencetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("admissionSession");

                    b.Navigation("applicant");

                    b.Navigation("applicanttype");

                    b.Navigation("attendenceType");

                    b.Navigation("entrymode");

                    b.Navigation("programmeType");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicationEntryModeDocument", b =>
                {
                    b.HasOne("CoreAPI.Models.Application", null)
                        .WithMany("applicationentrymodes")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.EntryModeRequirement", "modeRequirement")
                        .WithMany("applications")
                        .HasForeignKey("EntryModeRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("modeRequirement");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicationPayment", b =>
                {
                    b.HasOne("CoreAPI.Models.AdmissionSession", "admissionSession")
                        .WithMany()
                        .HasForeignKey("admissionsessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Applicant", "applicant")
                        .WithMany()
                        .HasForeignKey("applicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Application", "application")
                        .WithMany()
                        .HasForeignKey("applicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("admissionSession");

                    b.Navigation("applicant");

                    b.Navigation("application");
                });

            modelBuilder.Entity("CoreAPI.Models.ApplicationProgramme", b =>
                {
                    b.HasOne("CoreAPI.Models.AttendenceType", "attendenceType")
                        .WithMany()
                        .HasForeignKey("AttendenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Programme", "programme")
                        .WithMany()
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Application", "application")
                        .WithMany("applicationprogrammes")
                        .HasForeignKey("applicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("application");

                    b.Navigation("attendenceType");

                    b.Navigation("programme");
                });

            modelBuilder.Entity("CoreAPI.Models.Campus", b =>
                {
                    b.HasOne("CoreAPI.Models.CampusType", "CampusType")
                        .WithMany("Campuses")
                        .HasForeignKey("CampusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.District", "District")
                        .WithMany("Campuses")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampusType");

                    b.Navigation("District");
                });

            modelBuilder.Entity("CoreAPI.Models.Course", b =>
                {
                    b.HasOne("CoreAPI.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("CoreAPI.Models.CourseOnOffer", b =>
                {
                    b.HasOne("CoreAPI.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.CourseOnOfferTemplate", null)
                        .WithMany("courses")
                        .HasForeignKey("CourseOnOfferTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("CoreAPI.Models.CourseOnOfferTemplate", b =>
                {
                    b.HasOne("CoreAPI.Models.Department", "department")
                        .WithMany("CourseOnOfferTemplates")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("CoreAPI.Models.Department", b =>
                {
                    b.HasOne("CoreAPI.Models.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("CoreAPI.Models.District", b =>
                {
                    b.HasOne("CoreAPI.Models.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("CoreAPI.Models.EntryModeRequirement", b =>
                {
                    b.HasOne("CoreAPI.Models.EntryMode", "entrymode")
                        .WithMany("requirements")
                        .HasForeignKey("EntryModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("entrymode");
                });

            modelBuilder.Entity("CoreAPI.Models.ExaminationPeriod", b =>
                {
                    b.HasOne("CoreAPI.Models.Semester", null)
                        .WithMany("examinationperiods")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreAPI.Models.Generalregulation", b =>
                {
                    b.HasOne("CoreAPI.Models.Globalsettingtemplate", "globalsettingtemplate")
                        .WithMany("generalregulations")
                        .HasForeignKey("GlobalsettingtemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.ProgrammeType", "programmeType")
                        .WithMany()
                        .HasForeignKey("ProgrammetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("globalsettingtemplate");

                    b.Navigation("programmeType");
                });

            modelBuilder.Entity("CoreAPI.Models.Generalregulationacademicrule", b =>
                {
                    b.HasOne("CoreAPI.Models.Generalregulation", "generalregulation")
                        .WithMany("generalregulationacademicrules")
                        .HasForeignKey("GeneralregulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("generalregulation");
                });

            modelBuilder.Entity("CoreAPI.Models.Generalregulationregistrationrule", b =>
                {
                    b.HasOne("CoreAPI.Models.Generalregulation", "generalregulation")
                        .WithMany("generalregulationregistrationrules")
                        .HasForeignKey("GeneralregulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("generalregulation");
                });

            modelBuilder.Entity("CoreAPI.Models.Prerequisite", b =>
                {
                    b.HasOne("CoreAPI.Models.Academicregulationparameter", null)
                        .WithMany("Prerequisites")
                        .HasForeignKey("AcademicregulationparameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("CoreAPI.Models.Programme", b =>
                {
                    b.HasOne("CoreAPI.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.ProgrammeType", "Type")
                        .WithMany()
                        .HasForeignKey("ProgrammeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CoreAPI.Models.ProgrammeHistory", b =>
                {
                    b.HasOne("CoreAPI.Models.Programme", null)
                        .WithMany("History")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreAPI.Models.ProgrammeSpecialization", b =>
                {
                    b.HasOne("CoreAPI.Models.Programme", null)
                        .WithMany("Specializations")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreAPI.Models.RegistrationFee", b =>
                {
                    b.HasOne("CoreAPI.Models.Applicanttype", "applicanttype")
                        .WithMany()
                        .HasForeignKey("ApplicantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Currency", "currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Faculty", "faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.ProgrammeType", "programmetype")
                        .WithMany()
                        .HasForeignKey("ProgrammeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.RegistrationFeeTemplate", "template")
                        .WithMany("registrationfees")
                        .HasForeignKey("RegistrationFeeTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("applicanttype");

                    b.Navigation("currency");

                    b.Navigation("faculty");

                    b.Navigation("programmetype");

                    b.Navigation("template");
                });

            modelBuilder.Entity("CoreAPI.Models.RegistrationPeriod", b =>
                {
                    b.HasOne("CoreAPI.Models.Semester", null)
                        .WithMany("registrationperiods")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreAPI.Models.RoleSystemmodule", b =>
                {
                    b.HasOne("CoreAPI.Models.Role", null)
                        .WithMany("systemmodules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Systemmodule", "systemmodule")
                        .WithMany("rolesystemmodules")
                        .HasForeignKey("SystemModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("systemmodule");
                });

            modelBuilder.Entity("CoreAPI.Models.RoleSystempermission", b =>
                {
                    b.HasOne("CoreAPI.Models.Role", "role")
                        .WithMany("systempermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.RoleSystemsubmodule", "rolestystemsubmodule")
                        .WithMany("Rolesystempermissions")
                        .HasForeignKey("RoleSystemsubmoduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Systempermission", "permission")
                        .WithMany("rolepermissions")
                        .HasForeignKey("SystempermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");

                    b.Navigation("rolestystemsubmodule");
                });

            modelBuilder.Entity("CoreAPI.Models.RoleSystemsubmodule", b =>
                {
                    b.HasOne("CoreAPI.Models.RoleSystemmodule", "rolesystemmodule")
                        .WithMany("submodules")
                        .HasForeignKey("RoleSystemmoduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Systemsubmodule", "systemsubmodule")
                        .WithMany("rolesystemsubmodules")
                        .HasForeignKey("SystemSubmoduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("rolesystemmodule");

                    b.Navigation("systemsubmodule");
                });

            modelBuilder.Entity("CoreAPI.Models.SemesterCourse", b =>
                {
                    b.HasOne("CoreAPI.Models.CourseOnOfferTemplate", "CourseOnOfferTemplate")
                        .WithMany()
                        .HasForeignKey("CourseOnOfferTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseOnOfferTemplate");
                });

            modelBuilder.Entity("CoreAPI.Models.SemesterRegistrationFeeTemplate", b =>
                {
                    b.HasOne("CoreAPI.Models.RegistrationFeeTemplate", "registrationFeeTemplate")
                        .WithMany()
                        .HasForeignKey("RegistrationFeeTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Semester", null)
                        .WithMany("semesterregistrationfees")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("registrationFeeTemplate");
                });

            modelBuilder.Entity("CoreAPI.Models.Student", b =>
                {
                    b.HasOne("CoreAPI.Models.Campus", "campus")
                        .WithMany()
                        .HasForeignKey("CampusId");

                    b.Navigation("campus");
                });

            modelBuilder.Entity("CoreAPI.Models.StudentContact", b =>
                {
                    b.HasOne("CoreAPI.Models.Student", null)
                        .WithOne("contact")
                        .HasForeignKey("CoreAPI.Models.StudentContact", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreAPI.Models.StudentKin", b =>
                {
                    b.HasOne("CoreAPI.Models.Student", null)
                        .WithOne("nextofkin")
                        .HasForeignKey("CoreAPI.Models.StudentKin", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreAPI.Models.StudentProgramme", b =>
                {
                    b.HasOne("CoreAPI.Models.Academicregulation", "academicregulation")
                        .WithMany()
                        .HasForeignKey("AcademicRegulationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.AttendenceType", "attendencetype")
                        .WithMany()
                        .HasForeignKey("AttendenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Programme", "programme")
                        .WithMany()
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.Student", "student")
                        .WithMany("programmes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("academicregulation");

                    b.Navigation("attendencetype");

                    b.Navigation("programme");

                    b.Navigation("student");
                });

            modelBuilder.Entity("CoreAPI.Models.Systempermission", b =>
                {
                    b.HasOne("CoreAPI.Models.Systemsubmodule", "systemsubmodule")
                        .WithMany("permissions")
                        .HasForeignKey("SystemSubmoduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("systemsubmodule");
                });

            modelBuilder.Entity("CoreAPI.Models.Systemsubmodule", b =>
                {
                    b.HasOne("CoreAPI.Models.Systemmodule", "systemmodule")
                        .WithMany("submodules")
                        .HasForeignKey("SystemModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("systemmodule");
                });

            modelBuilder.Entity("CoreAPI.Models.UserCampus", b =>
                {
                    b.HasOne("CoreAPI.Models.Campus", "campus")
                        .WithMany("users")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.User", "user")
                        .WithMany("campuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("campus");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CoreAPI.Models.UserDepartment", b =>
                {
                    b.HasOne("CoreAPI.Models.Department", "department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.User", "user")
                        .WithMany("departments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CoreAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoreAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoreAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CoreAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoreAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreAPI.Models.Academicregulation", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("CoreAPI.Models.Academicregulationparameter", b =>
                {
                    b.Navigation("Alternatives");

                    b.Navigation("Prerequisites");
                });

            modelBuilder.Entity("CoreAPI.Models.AdmissionDocument", b =>
                {
                    b.Navigation("applicantdocuments");
                });

            modelBuilder.Entity("CoreAPI.Models.AdmissionFeeTemplate", b =>
                {
                    b.Navigation("admissionFees");
                });

            modelBuilder.Entity("CoreAPI.Models.AdmissionSession", b =>
                {
                    b.Navigation("Admissionsessiontemplate");

                    b.Navigation("applications");
                });

            modelBuilder.Entity("CoreAPI.Models.Admissionprogramme", b =>
                {
                    b.Navigation("attendencetypes");
                });

            modelBuilder.Entity("CoreAPI.Models.Admissiontemplate", b =>
                {
                    b.Navigation("programmes");
                });

            modelBuilder.Entity("CoreAPI.Models.Applicant", b =>
                {
                    b.Navigation("applications");

                    b.Navigation("documents");

                    b.Navigation("otherqualifications");

                    b.Navigation("studentnumber");

                    b.Navigation("subjects");

                    b.Navigation("workexperiences");
                });

            modelBuilder.Entity("CoreAPI.Models.Applicanttype", b =>
                {
                    b.Navigation("admissionfees");
                });

            modelBuilder.Entity("CoreAPI.Models.Application", b =>
                {
                    b.Navigation("applicationentrymodes");

                    b.Navigation("applicationprogrammes");
                });

            modelBuilder.Entity("CoreAPI.Models.Campus", b =>
                {
                    b.Navigation("applications");

                    b.Navigation("users");
                });

            modelBuilder.Entity("CoreAPI.Models.CampusType", b =>
                {
                    b.Navigation("Campuses");
                });

            modelBuilder.Entity("CoreAPI.Models.Course", b =>
                {
                    b.Navigation("Academicregulationparameters");
                });

            modelBuilder.Entity("CoreAPI.Models.CourseOnOfferTemplate", b =>
                {
                    b.Navigation("courses");
                });

            modelBuilder.Entity("CoreAPI.Models.Currency", b =>
                {
                    b.Navigation("AdmissionFees");
                });

            modelBuilder.Entity("CoreAPI.Models.Department", b =>
                {
                    b.Navigation("CourseOnOfferTemplates");
                });

            modelBuilder.Entity("CoreAPI.Models.District", b =>
                {
                    b.Navigation("Campuses");
                });

            modelBuilder.Entity("CoreAPI.Models.EntryMode", b =>
                {
                    b.Navigation("requirements");
                });

            modelBuilder.Entity("CoreAPI.Models.EntryModeRequirement", b =>
                {
                    b.Navigation("applications");
                });

            modelBuilder.Entity("CoreAPI.Models.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("CoreAPI.Models.Generalregulation", b =>
                {
                    b.Navigation("generalregulationacademicrules");

                    b.Navigation("generalregulationregistrationrules");
                });

            modelBuilder.Entity("CoreAPI.Models.Globalsettingtemplate", b =>
                {
                    b.Navigation("generalregulations");
                });

            modelBuilder.Entity("CoreAPI.Models.Programme", b =>
                {
                    b.Navigation("Academicregulations");

                    b.Navigation("Admissionprogrammes");

                    b.Navigation("History");

                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("CoreAPI.Models.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("CoreAPI.Models.RegistrationFeeTemplate", b =>
                {
                    b.Navigation("registrationfees");
                });

            modelBuilder.Entity("CoreAPI.Models.Role", b =>
                {
                    b.Navigation("systemmodules");

                    b.Navigation("systempermissions");
                });

            modelBuilder.Entity("CoreAPI.Models.RoleSystemmodule", b =>
                {
                    b.Navigation("submodules");
                });

            modelBuilder.Entity("CoreAPI.Models.RoleSystemsubmodule", b =>
                {
                    b.Navigation("Rolesystempermissions");
                });

            modelBuilder.Entity("CoreAPI.Models.Semester", b =>
                {
                    b.Navigation("examinationperiods");

                    b.Navigation("registrationperiods");

                    b.Navigation("semesterregistrationfees");
                });

            modelBuilder.Entity("CoreAPI.Models.Student", b =>
                {
                    b.Navigation("contact")
                        .IsRequired();

                    b.Navigation("nextofkin")
                        .IsRequired();

                    b.Navigation("programmes");
                });

            modelBuilder.Entity("CoreAPI.Models.Systemmodule", b =>
                {
                    b.Navigation("rolesystemmodules");

                    b.Navigation("submodules");
                });

            modelBuilder.Entity("CoreAPI.Models.Systempermission", b =>
                {
                    b.Navigation("rolepermissions");
                });

            modelBuilder.Entity("CoreAPI.Models.Systemsubmodule", b =>
                {
                    b.Navigation("permissions");

                    b.Navigation("rolesystemsubmodules");
                });

            modelBuilder.Entity("CoreAPI.Models.User", b =>
                {
                    b.Navigation("campuses");

                    b.Navigation("departments");
                });
#pragma warning restore 612, 618
        }
    }
}
